// Code generated by mockery v2.43.2. DO NOT EDIT.

package counter

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockRankMethod is an autogenerated mock type for the RankMethod type
type MockRankMethod struct {
	mock.Mock
}

type MockRankMethod_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRankMethod) EXPECT() *MockRankMethod_Expecter {
	return &MockRankMethod_Expecter{mock: &_m.Mock}
}

// GetRankDailyByLimit provides a mock function with given fields: ctx, group, t, limit
func (_m *MockRankMethod) GetRankDailyByLimit(ctx context.Context, group string, t time.Time, limit int) ([]*Score, error) {
	ret := _m.Called(ctx, group, t, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetRankDailyByLimit")
	}

	var r0 []*Score
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, int) ([]*Score, error)); ok {
		return rf(ctx, group, t, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, int) []*Score); ok {
		r0 = rf(ctx, group, t, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Score)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time, int) error); ok {
		r1 = rf(ctx, group, t, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRankMethod_GetRankDailyByLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRankDailyByLimit'
type MockRankMethod_GetRankDailyByLimit_Call struct {
	*mock.Call
}

// GetRankDailyByLimit is a helper method to define mock.On call
//   - ctx context.Context
//   - group string
//   - t time.Time
//   - limit int
func (_e *MockRankMethod_Expecter) GetRankDailyByLimit(ctx interface{}, group interface{}, t interface{}, limit interface{}) *MockRankMethod_GetRankDailyByLimit_Call {
	return &MockRankMethod_GetRankDailyByLimit_Call{Call: _e.mock.On("GetRankDailyByLimit", ctx, group, t, limit)}
}

func (_c *MockRankMethod_GetRankDailyByLimit_Call) Run(run func(ctx context.Context, group string, t time.Time, limit int)) *MockRankMethod_GetRankDailyByLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time), args[3].(int))
	})
	return _c
}

func (_c *MockRankMethod_GetRankDailyByLimit_Call) Return(_a0 []*Score, _a1 error) *MockRankMethod_GetRankDailyByLimit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRankMethod_GetRankDailyByLimit_Call) RunAndReturn(run func(context.Context, string, time.Time, int) ([]*Score, error)) *MockRankMethod_GetRankDailyByLimit_Call {
	_c.Call.Return(run)
	return _c
}

// GetRankTotalByLimit provides a mock function with given fields: ctx, group, limit
func (_m *MockRankMethod) GetRankTotalByLimit(ctx context.Context, group string, limit int) ([]*Score, error) {
	ret := _m.Called(ctx, group, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetRankTotalByLimit")
	}

	var r0 []*Score
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) ([]*Score, error)); ok {
		return rf(ctx, group, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []*Score); ok {
		r0 = rf(ctx, group, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Score)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, group, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRankMethod_GetRankTotalByLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRankTotalByLimit'
type MockRankMethod_GetRankTotalByLimit_Call struct {
	*mock.Call
}

// GetRankTotalByLimit is a helper method to define mock.On call
//   - ctx context.Context
//   - group string
//   - limit int
func (_e *MockRankMethod_Expecter) GetRankTotalByLimit(ctx interface{}, group interface{}, limit interface{}) *MockRankMethod_GetRankTotalByLimit_Call {
	return &MockRankMethod_GetRankTotalByLimit_Call{Call: _e.mock.On("GetRankTotalByLimit", ctx, group, limit)}
}

func (_c *MockRankMethod_GetRankTotalByLimit_Call) Run(run func(ctx context.Context, group string, limit int)) *MockRankMethod_GetRankTotalByLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockRankMethod_GetRankTotalByLimit_Call) Return(_a0 []*Score, _a1 error) *MockRankMethod_GetRankTotalByLimit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRankMethod_GetRankTotalByLimit_Call) RunAndReturn(run func(context.Context, string, int) ([]*Score, error)) *MockRankMethod_GetRankTotalByLimit_Call {
	_c.Call.Return(run)
	return _c
}

// IncreaseRankOfDaily provides a mock function with given fields: ctx, group, id, t, ttl
func (_m *MockRankMethod) IncreaseRankOfDaily(ctx context.Context, group string, id string, t time.Time, ttl time.Duration) (*Score, error) {
	ret := _m.Called(ctx, group, id, t, ttl)

	if len(ret) == 0 {
		panic("no return value specified for IncreaseRankOfDaily")
	}

	var r0 *Score
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time, time.Duration) (*Score, error)); ok {
		return rf(ctx, group, id, t, ttl)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time, time.Duration) *Score); ok {
		r0 = rf(ctx, group, id, t, ttl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Score)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, time.Time, time.Duration) error); ok {
		r1 = rf(ctx, group, id, t, ttl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRankMethod_IncreaseRankOfDaily_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncreaseRankOfDaily'
type MockRankMethod_IncreaseRankOfDaily_Call struct {
	*mock.Call
}

// IncreaseRankOfDaily is a helper method to define mock.On call
//   - ctx context.Context
//   - group string
//   - id string
//   - t time.Time
//   - ttl time.Duration
func (_e *MockRankMethod_Expecter) IncreaseRankOfDaily(ctx interface{}, group interface{}, id interface{}, t interface{}, ttl interface{}) *MockRankMethod_IncreaseRankOfDaily_Call {
	return &MockRankMethod_IncreaseRankOfDaily_Call{Call: _e.mock.On("IncreaseRankOfDaily", ctx, group, id, t, ttl)}
}

func (_c *MockRankMethod_IncreaseRankOfDaily_Call) Run(run func(ctx context.Context, group string, id string, t time.Time, ttl time.Duration)) *MockRankMethod_IncreaseRankOfDaily_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Time), args[4].(time.Duration))
	})
	return _c
}

func (_c *MockRankMethod_IncreaseRankOfDaily_Call) Return(_a0 *Score, _a1 error) *MockRankMethod_IncreaseRankOfDaily_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRankMethod_IncreaseRankOfDaily_Call) RunAndReturn(run func(context.Context, string, string, time.Time, time.Duration) (*Score, error)) *MockRankMethod_IncreaseRankOfDaily_Call {
	_c.Call.Return(run)
	return _c
}

// IncreaseRankOfTotal provides a mock function with given fields: ctx, group, id
func (_m *MockRankMethod) IncreaseRankOfTotal(ctx context.Context, group string, id string) (*Score, error) {
	ret := _m.Called(ctx, group, id)

	if len(ret) == 0 {
		panic("no return value specified for IncreaseRankOfTotal")
	}

	var r0 *Score
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*Score, error)); ok {
		return rf(ctx, group, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *Score); ok {
		r0 = rf(ctx, group, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Score)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, group, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRankMethod_IncreaseRankOfTotal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncreaseRankOfTotal'
type MockRankMethod_IncreaseRankOfTotal_Call struct {
	*mock.Call
}

// IncreaseRankOfTotal is a helper method to define mock.On call
//   - ctx context.Context
//   - group string
//   - id string
func (_e *MockRankMethod_Expecter) IncreaseRankOfTotal(ctx interface{}, group interface{}, id interface{}) *MockRankMethod_IncreaseRankOfTotal_Call {
	return &MockRankMethod_IncreaseRankOfTotal_Call{Call: _e.mock.On("IncreaseRankOfTotal", ctx, group, id)}
}

func (_c *MockRankMethod_IncreaseRankOfTotal_Call) Run(run func(ctx context.Context, group string, id string)) *MockRankMethod_IncreaseRankOfTotal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRankMethod_IncreaseRankOfTotal_Call) Return(_a0 *Score, _a1 error) *MockRankMethod_IncreaseRankOfTotal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRankMethod_IncreaseRankOfTotal_Call) RunAndReturn(run func(context.Context, string, string) (*Score, error)) *MockRankMethod_IncreaseRankOfTotal_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRankMethod creates a new instance of MockRankMethod. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRankMethod(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRankMethod {
	mock := &MockRankMethod{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
