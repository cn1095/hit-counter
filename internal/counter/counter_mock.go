// Code generated by mockery v2.43.2. DO NOT EDIT.

package counter

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockCounter is an autogenerated mock type for the Counter type
type MockCounter struct {
	mock.Mock
}

type MockCounter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCounter) EXPECT() *MockCounter_Expecter {
	return &MockCounter_Expecter{mock: &_m.Mock}
}

// GetHitOfDaily provides a mock function with given fields: ctx, id, t
func (_m *MockCounter) GetHitOfDaily(ctx context.Context, id string, t time.Time) (*Score, error) {
	ret := _m.Called(ctx, id, t)

	if len(ret) == 0 {
		panic("no return value specified for GetHitOfDaily")
	}

	var r0 *Score
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) (*Score, error)); ok {
		return rf(ctx, id, t)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) *Score); ok {
		r0 = rf(ctx, id, t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Score)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time) error); ok {
		r1 = rf(ctx, id, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCounter_GetHitOfDaily_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHitOfDaily'
type MockCounter_GetHitOfDaily_Call struct {
	*mock.Call
}

// GetHitOfDaily is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - t time.Time
func (_e *MockCounter_Expecter) GetHitOfDaily(ctx interface{}, id interface{}, t interface{}) *MockCounter_GetHitOfDaily_Call {
	return &MockCounter_GetHitOfDaily_Call{Call: _e.mock.On("GetHitOfDaily", ctx, id, t)}
}

func (_c *MockCounter_GetHitOfDaily_Call) Run(run func(ctx context.Context, id string, t time.Time)) *MockCounter_GetHitOfDaily_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time))
	})
	return _c
}

func (_c *MockCounter_GetHitOfDaily_Call) Return(_a0 *Score, _a1 error) *MockCounter_GetHitOfDaily_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCounter_GetHitOfDaily_Call) RunAndReturn(run func(context.Context, string, time.Time) (*Score, error)) *MockCounter_GetHitOfDaily_Call {
	_c.Call.Return(run)
	return _c
}

// GetHitOfDailyAndTotal provides a mock function with given fields: ctx, id, t
func (_m *MockCounter) GetHitOfDailyAndTotal(ctx context.Context, id string, t time.Time) (*Score, *Score, error) {
	ret := _m.Called(ctx, id, t)

	if len(ret) == 0 {
		panic("no return value specified for GetHitOfDailyAndTotal")
	}

	var r0 *Score
	var r1 *Score
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) (*Score, *Score, error)); ok {
		return rf(ctx, id, t)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) *Score); ok {
		r0 = rf(ctx, id, t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Score)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time) *Score); ok {
		r1 = rf(ctx, id, t)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*Score)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, time.Time) error); ok {
		r2 = rf(ctx, id, t)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockCounter_GetHitOfDailyAndTotal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHitOfDailyAndTotal'
type MockCounter_GetHitOfDailyAndTotal_Call struct {
	*mock.Call
}

// GetHitOfDailyAndTotal is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - t time.Time
func (_e *MockCounter_Expecter) GetHitOfDailyAndTotal(ctx interface{}, id interface{}, t interface{}) *MockCounter_GetHitOfDailyAndTotal_Call {
	return &MockCounter_GetHitOfDailyAndTotal_Call{Call: _e.mock.On("GetHitOfDailyAndTotal", ctx, id, t)}
}

func (_c *MockCounter_GetHitOfDailyAndTotal_Call) Run(run func(ctx context.Context, id string, t time.Time)) *MockCounter_GetHitOfDailyAndTotal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time))
	})
	return _c
}

func (_c *MockCounter_GetHitOfDailyAndTotal_Call) Return(daily *Score, total *Score, err error) *MockCounter_GetHitOfDailyAndTotal_Call {
	_c.Call.Return(daily, total, err)
	return _c
}

func (_c *MockCounter_GetHitOfDailyAndTotal_Call) RunAndReturn(run func(context.Context, string, time.Time) (*Score, *Score, error)) *MockCounter_GetHitOfDailyAndTotal_Call {
	_c.Call.Return(run)
	return _c
}

// GetHitOfDailyByRange provides a mock function with given fields: ctx, id, timeRange
func (_m *MockCounter) GetHitOfDailyByRange(ctx context.Context, id string, timeRange []time.Time) ([]*Score, error) {
	ret := _m.Called(ctx, id, timeRange)

	if len(ret) == 0 {
		panic("no return value specified for GetHitOfDailyByRange")
	}

	var r0 []*Score
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []time.Time) ([]*Score, error)); ok {
		return rf(ctx, id, timeRange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []time.Time) []*Score); ok {
		r0 = rf(ctx, id, timeRange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Score)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []time.Time) error); ok {
		r1 = rf(ctx, id, timeRange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCounter_GetHitOfDailyByRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHitOfDailyByRange'
type MockCounter_GetHitOfDailyByRange_Call struct {
	*mock.Call
}

// GetHitOfDailyByRange is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - timeRange []time.Time
func (_e *MockCounter_Expecter) GetHitOfDailyByRange(ctx interface{}, id interface{}, timeRange interface{}) *MockCounter_GetHitOfDailyByRange_Call {
	return &MockCounter_GetHitOfDailyByRange_Call{Call: _e.mock.On("GetHitOfDailyByRange", ctx, id, timeRange)}
}

func (_c *MockCounter_GetHitOfDailyByRange_Call) Run(run func(ctx context.Context, id string, timeRange []time.Time)) *MockCounter_GetHitOfDailyByRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]time.Time))
	})
	return _c
}

func (_c *MockCounter_GetHitOfDailyByRange_Call) Return(_a0 []*Score, _a1 error) *MockCounter_GetHitOfDailyByRange_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCounter_GetHitOfDailyByRange_Call) RunAndReturn(run func(context.Context, string, []time.Time) ([]*Score, error)) *MockCounter_GetHitOfDailyByRange_Call {
	_c.Call.Return(run)
	return _c
}

// GetHitOfTotal provides a mock function with given fields: ctx, id
func (_m *MockCounter) GetHitOfTotal(ctx context.Context, id string) (*Score, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetHitOfTotal")
	}

	var r0 *Score
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*Score, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *Score); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Score)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCounter_GetHitOfTotal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHitOfTotal'
type MockCounter_GetHitOfTotal_Call struct {
	*mock.Call
}

// GetHitOfTotal is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockCounter_Expecter) GetHitOfTotal(ctx interface{}, id interface{}) *MockCounter_GetHitOfTotal_Call {
	return &MockCounter_GetHitOfTotal_Call{Call: _e.mock.On("GetHitOfTotal", ctx, id)}
}

func (_c *MockCounter_GetHitOfTotal_Call) Run(run func(ctx context.Context, id string)) *MockCounter_GetHitOfTotal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCounter_GetHitOfTotal_Call) Return(_a0 *Score, _a1 error) *MockCounter_GetHitOfTotal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCounter_GetHitOfTotal_Call) RunAndReturn(run func(context.Context, string) (*Score, error)) *MockCounter_GetHitOfTotal_Call {
	_c.Call.Return(run)
	return _c
}

// GetRankDailyByLimit provides a mock function with given fields: ctx, group, t, limit
func (_m *MockCounter) GetRankDailyByLimit(ctx context.Context, group string, t time.Time, limit int) ([]*Score, error) {
	ret := _m.Called(ctx, group, t, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetRankDailyByLimit")
	}

	var r0 []*Score
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, int) ([]*Score, error)); ok {
		return rf(ctx, group, t, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, int) []*Score); ok {
		r0 = rf(ctx, group, t, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Score)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time, int) error); ok {
		r1 = rf(ctx, group, t, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCounter_GetRankDailyByLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRankDailyByLimit'
type MockCounter_GetRankDailyByLimit_Call struct {
	*mock.Call
}

// GetRankDailyByLimit is a helper method to define mock.On call
//   - ctx context.Context
//   - group string
//   - t time.Time
//   - limit int
func (_e *MockCounter_Expecter) GetRankDailyByLimit(ctx interface{}, group interface{}, t interface{}, limit interface{}) *MockCounter_GetRankDailyByLimit_Call {
	return &MockCounter_GetRankDailyByLimit_Call{Call: _e.mock.On("GetRankDailyByLimit", ctx, group, t, limit)}
}

func (_c *MockCounter_GetRankDailyByLimit_Call) Run(run func(ctx context.Context, group string, t time.Time, limit int)) *MockCounter_GetRankDailyByLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time), args[3].(int))
	})
	return _c
}

func (_c *MockCounter_GetRankDailyByLimit_Call) Return(_a0 []*Score, _a1 error) *MockCounter_GetRankDailyByLimit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCounter_GetRankDailyByLimit_Call) RunAndReturn(run func(context.Context, string, time.Time, int) ([]*Score, error)) *MockCounter_GetRankDailyByLimit_Call {
	_c.Call.Return(run)
	return _c
}

// GetRankTotalByLimit provides a mock function with given fields: ctx, group, limit
func (_m *MockCounter) GetRankTotalByLimit(ctx context.Context, group string, limit int) ([]*Score, error) {
	ret := _m.Called(ctx, group, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetRankTotalByLimit")
	}

	var r0 []*Score
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) ([]*Score, error)); ok {
		return rf(ctx, group, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []*Score); ok {
		r0 = rf(ctx, group, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Score)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, group, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCounter_GetRankTotalByLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRankTotalByLimit'
type MockCounter_GetRankTotalByLimit_Call struct {
	*mock.Call
}

// GetRankTotalByLimit is a helper method to define mock.On call
//   - ctx context.Context
//   - group string
//   - limit int
func (_e *MockCounter_Expecter) GetRankTotalByLimit(ctx interface{}, group interface{}, limit interface{}) *MockCounter_GetRankTotalByLimit_Call {
	return &MockCounter_GetRankTotalByLimit_Call{Call: _e.mock.On("GetRankTotalByLimit", ctx, group, limit)}
}

func (_c *MockCounter_GetRankTotalByLimit_Call) Run(run func(ctx context.Context, group string, limit int)) *MockCounter_GetRankTotalByLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockCounter_GetRankTotalByLimit_Call) Return(_a0 []*Score, _a1 error) *MockCounter_GetRankTotalByLimit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCounter_GetRankTotalByLimit_Call) RunAndReturn(run func(context.Context, string, int) ([]*Score, error)) *MockCounter_GetRankTotalByLimit_Call {
	_c.Call.Return(run)
	return _c
}

// IncreaseHitOfDaily provides a mock function with given fields: ctx, id, t, ttl
func (_m *MockCounter) IncreaseHitOfDaily(ctx context.Context, id string, t time.Time, ttl time.Duration) (*Score, error) {
	ret := _m.Called(ctx, id, t, ttl)

	if len(ret) == 0 {
		panic("no return value specified for IncreaseHitOfDaily")
	}

	var r0 *Score
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Duration) (*Score, error)); ok {
		return rf(ctx, id, t, ttl)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Duration) *Score); ok {
		r0 = rf(ctx, id, t, ttl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Score)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time, time.Duration) error); ok {
		r1 = rf(ctx, id, t, ttl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCounter_IncreaseHitOfDaily_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncreaseHitOfDaily'
type MockCounter_IncreaseHitOfDaily_Call struct {
	*mock.Call
}

// IncreaseHitOfDaily is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - t time.Time
//   - ttl time.Duration
func (_e *MockCounter_Expecter) IncreaseHitOfDaily(ctx interface{}, id interface{}, t interface{}, ttl interface{}) *MockCounter_IncreaseHitOfDaily_Call {
	return &MockCounter_IncreaseHitOfDaily_Call{Call: _e.mock.On("IncreaseHitOfDaily", ctx, id, t, ttl)}
}

func (_c *MockCounter_IncreaseHitOfDaily_Call) Run(run func(ctx context.Context, id string, t time.Time, ttl time.Duration)) *MockCounter_IncreaseHitOfDaily_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockCounter_IncreaseHitOfDaily_Call) Return(_a0 *Score, _a1 error) *MockCounter_IncreaseHitOfDaily_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCounter_IncreaseHitOfDaily_Call) RunAndReturn(run func(context.Context, string, time.Time, time.Duration) (*Score, error)) *MockCounter_IncreaseHitOfDaily_Call {
	_c.Call.Return(run)
	return _c
}

// IncreaseHitOfTotal provides a mock function with given fields: ctx, id
func (_m *MockCounter) IncreaseHitOfTotal(ctx context.Context, id string) (*Score, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IncreaseHitOfTotal")
	}

	var r0 *Score
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*Score, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *Score); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Score)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCounter_IncreaseHitOfTotal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncreaseHitOfTotal'
type MockCounter_IncreaseHitOfTotal_Call struct {
	*mock.Call
}

// IncreaseHitOfTotal is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockCounter_Expecter) IncreaseHitOfTotal(ctx interface{}, id interface{}) *MockCounter_IncreaseHitOfTotal_Call {
	return &MockCounter_IncreaseHitOfTotal_Call{Call: _e.mock.On("IncreaseHitOfTotal", ctx, id)}
}

func (_c *MockCounter_IncreaseHitOfTotal_Call) Run(run func(ctx context.Context, id string)) *MockCounter_IncreaseHitOfTotal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCounter_IncreaseHitOfTotal_Call) Return(_a0 *Score, _a1 error) *MockCounter_IncreaseHitOfTotal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCounter_IncreaseHitOfTotal_Call) RunAndReturn(run func(context.Context, string) (*Score, error)) *MockCounter_IncreaseHitOfTotal_Call {
	_c.Call.Return(run)
	return _c
}

// IncreaseRankOfDaily provides a mock function with given fields: ctx, group, id, t, ttl
func (_m *MockCounter) IncreaseRankOfDaily(ctx context.Context, group string, id string, t time.Time, ttl time.Duration) (*Score, error) {
	ret := _m.Called(ctx, group, id, t, ttl)

	if len(ret) == 0 {
		panic("no return value specified for IncreaseRankOfDaily")
	}

	var r0 *Score
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time, time.Duration) (*Score, error)); ok {
		return rf(ctx, group, id, t, ttl)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time, time.Duration) *Score); ok {
		r0 = rf(ctx, group, id, t, ttl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Score)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, time.Time, time.Duration) error); ok {
		r1 = rf(ctx, group, id, t, ttl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCounter_IncreaseRankOfDaily_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncreaseRankOfDaily'
type MockCounter_IncreaseRankOfDaily_Call struct {
	*mock.Call
}

// IncreaseRankOfDaily is a helper method to define mock.On call
//   - ctx context.Context
//   - group string
//   - id string
//   - t time.Time
//   - ttl time.Duration
func (_e *MockCounter_Expecter) IncreaseRankOfDaily(ctx interface{}, group interface{}, id interface{}, t interface{}, ttl interface{}) *MockCounter_IncreaseRankOfDaily_Call {
	return &MockCounter_IncreaseRankOfDaily_Call{Call: _e.mock.On("IncreaseRankOfDaily", ctx, group, id, t, ttl)}
}

func (_c *MockCounter_IncreaseRankOfDaily_Call) Run(run func(ctx context.Context, group string, id string, t time.Time, ttl time.Duration)) *MockCounter_IncreaseRankOfDaily_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Time), args[4].(time.Duration))
	})
	return _c
}

func (_c *MockCounter_IncreaseRankOfDaily_Call) Return(_a0 *Score, _a1 error) *MockCounter_IncreaseRankOfDaily_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCounter_IncreaseRankOfDaily_Call) RunAndReturn(run func(context.Context, string, string, time.Time, time.Duration) (*Score, error)) *MockCounter_IncreaseRankOfDaily_Call {
	_c.Call.Return(run)
	return _c
}

// IncreaseRankOfTotal provides a mock function with given fields: ctx, group, id
func (_m *MockCounter) IncreaseRankOfTotal(ctx context.Context, group string, id string) (*Score, error) {
	ret := _m.Called(ctx, group, id)

	if len(ret) == 0 {
		panic("no return value specified for IncreaseRankOfTotal")
	}

	var r0 *Score
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*Score, error)); ok {
		return rf(ctx, group, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *Score); ok {
		r0 = rf(ctx, group, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Score)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, group, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCounter_IncreaseRankOfTotal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncreaseRankOfTotal'
type MockCounter_IncreaseRankOfTotal_Call struct {
	*mock.Call
}

// IncreaseRankOfTotal is a helper method to define mock.On call
//   - ctx context.Context
//   - group string
//   - id string
func (_e *MockCounter_Expecter) IncreaseRankOfTotal(ctx interface{}, group interface{}, id interface{}) *MockCounter_IncreaseRankOfTotal_Call {
	return &MockCounter_IncreaseRankOfTotal_Call{Call: _e.mock.On("IncreaseRankOfTotal", ctx, group, id)}
}

func (_c *MockCounter_IncreaseRankOfTotal_Call) Run(run func(ctx context.Context, group string, id string)) *MockCounter_IncreaseRankOfTotal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockCounter_IncreaseRankOfTotal_Call) Return(_a0 *Score, _a1 error) *MockCounter_IncreaseRankOfTotal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCounter_IncreaseRankOfTotal_Call) RunAndReturn(run func(context.Context, string, string) (*Score, error)) *MockCounter_IncreaseRankOfTotal_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCounter creates a new instance of MockCounter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCounter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCounter {
	mock := &MockCounter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
