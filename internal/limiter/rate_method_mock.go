// Code generated by mockery v2.43.2. DO NOT EDIT.

package limiter

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRateMethod is an autogenerated mock type for the RateMethod type
type MockRateMethod struct {
	mock.Mock
}

type MockRateMethod_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRateMethod) EXPECT() *MockRateMethod_Expecter {
	return &MockRateMethod_Expecter{mock: &_m.Mock}
}

// Allow provides a mock function with given fields: ctx, id
func (_m *MockRateMethod) Allow(ctx context.Context, id string) bool {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Allow")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockRateMethod_Allow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Allow'
type MockRateMethod_Allow_Call struct {
	*mock.Call
}

// Allow is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockRateMethod_Expecter) Allow(ctx interface{}, id interface{}) *MockRateMethod_Allow_Call {
	return &MockRateMethod_Allow_Call{Call: _e.mock.On("Allow", ctx, id)}
}

func (_c *MockRateMethod_Allow_Call) Run(run func(ctx context.Context, id string)) *MockRateMethod_Allow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRateMethod_Allow_Call) Return(_a0 bool) *MockRateMethod_Allow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRateMethod_Allow_Call) RunAndReturn(run func(context.Context, string) bool) *MockRateMethod_Allow_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRateMethod creates a new instance of MockRateMethod. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRateMethod(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRateMethod {
	mock := &MockRateMethod{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
