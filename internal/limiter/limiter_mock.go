// Code generated by mockery v2.43.2. DO NOT EDIT.

package limiter

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockLimiter is an autogenerated mock type for the Limiter type
type MockLimiter struct {
	mock.Mock
}

type MockLimiter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLimiter) EXPECT() *MockLimiter_Expecter {
	return &MockLimiter_Expecter{mock: &_m.Mock}
}

// AddBlackList provides a mock function with given fields: ctx, id
func (_m *MockLimiter) AddBlackList(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for AddBlackList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLimiter_AddBlackList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBlackList'
type MockLimiter_AddBlackList_Call struct {
	*mock.Call
}

// AddBlackList is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockLimiter_Expecter) AddBlackList(ctx interface{}, id interface{}) *MockLimiter_AddBlackList_Call {
	return &MockLimiter_AddBlackList_Call{Call: _e.mock.On("AddBlackList", ctx, id)}
}

func (_c *MockLimiter_AddBlackList_Call) Run(run func(ctx context.Context, id string)) *MockLimiter_AddBlackList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLimiter_AddBlackList_Call) Return(_a0 error) *MockLimiter_AddBlackList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLimiter_AddBlackList_Call) RunAndReturn(run func(context.Context, string) error) *MockLimiter_AddBlackList_Call {
	_c.Call.Return(run)
	return _c
}

// Allow provides a mock function with given fields: ctx, id
func (_m *MockLimiter) Allow(ctx context.Context, id string) bool {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Allow")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockLimiter_Allow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Allow'
type MockLimiter_Allow_Call struct {
	*mock.Call
}

// Allow is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockLimiter_Expecter) Allow(ctx interface{}, id interface{}) *MockLimiter_Allow_Call {
	return &MockLimiter_Allow_Call{Call: _e.mock.On("Allow", ctx, id)}
}

func (_c *MockLimiter_Allow_Call) Run(run func(ctx context.Context, id string)) *MockLimiter_Allow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLimiter_Allow_Call) Return(_a0 bool) *MockLimiter_Allow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLimiter_Allow_Call) RunAndReturn(run func(context.Context, string) bool) *MockLimiter_Allow_Call {
	_c.Call.Return(run)
	return _c
}

// IsBlackList provides a mock function with given fields: ctx, id
func (_m *MockLimiter) IsBlackList(ctx context.Context, id string) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IsBlackList")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLimiter_IsBlackList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsBlackList'
type MockLimiter_IsBlackList_Call struct {
	*mock.Call
}

// IsBlackList is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockLimiter_Expecter) IsBlackList(ctx interface{}, id interface{}) *MockLimiter_IsBlackList_Call {
	return &MockLimiter_IsBlackList_Call{Call: _e.mock.On("IsBlackList", ctx, id)}
}

func (_c *MockLimiter_IsBlackList_Call) Run(run func(ctx context.Context, id string)) *MockLimiter_IsBlackList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLimiter_IsBlackList_Call) Return(_a0 bool, _a1 error) *MockLimiter_IsBlackList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLimiter_IsBlackList_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockLimiter_IsBlackList_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLimiter creates a new instance of MockLimiter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLimiter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLimiter {
	mock := &MockLimiter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
