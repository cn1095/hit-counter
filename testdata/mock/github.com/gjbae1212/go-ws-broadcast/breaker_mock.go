// Code generated by mockery v2.43.2. DO NOT EDIT.

package websocket

import (
	gorillawebsocket "github.com/gorilla/websocket"
	mock "github.com/stretchr/testify/mock"

	websocket "github.com/gjbae1212/go-ws-broadcast"
)

// MockBreaker is an autogenerated mock type for the Breaker type
type MockBreaker struct {
	mock.Mock
}

type MockBreaker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBreaker) EXPECT() *MockBreaker_Expecter {
	return &MockBreaker_Expecter{mock: &_m.Mock}
}

// BroadCast provides a mock function with given fields: msg
func (_m *MockBreaker) BroadCast(msg websocket.Message) error {
	ret := _m.Called(msg)

	if len(ret) == 0 {
		panic("no return value specified for BroadCast")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(websocket.Message) error); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBreaker_BroadCast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BroadCast'
type MockBreaker_BroadCast_Call struct {
	*mock.Call
}

// BroadCast is a helper method to define mock.On call
//   - msg websocket.Message
func (_e *MockBreaker_Expecter) BroadCast(msg interface{}) *MockBreaker_BroadCast_Call {
	return &MockBreaker_BroadCast_Call{Call: _e.mock.On("BroadCast", msg)}
}

func (_c *MockBreaker_BroadCast_Call) Run(run func(msg websocket.Message)) *MockBreaker_BroadCast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(websocket.Message))
	})
	return _c
}

func (_c *MockBreaker_BroadCast_Call) Return(_a0 error) *MockBreaker_BroadCast_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBreaker_BroadCast_Call) RunAndReturn(run func(websocket.Message) error) *MockBreaker_BroadCast_Call {
	_c.Call.Return(run)
	return _c
}

// MaxReadLimit provides a mock function with given fields:
func (_m *MockBreaker) MaxReadLimit() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MaxReadLimit")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// MockBreaker_MaxReadLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MaxReadLimit'
type MockBreaker_MaxReadLimit_Call struct {
	*mock.Call
}

// MaxReadLimit is a helper method to define mock.On call
func (_e *MockBreaker_Expecter) MaxReadLimit() *MockBreaker_MaxReadLimit_Call {
	return &MockBreaker_MaxReadLimit_Call{Call: _e.mock.On("MaxReadLimit")}
}

func (_c *MockBreaker_MaxReadLimit_Call) Run(run func()) *MockBreaker_MaxReadLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBreaker_MaxReadLimit_Call) Return(_a0 int64) *MockBreaker_MaxReadLimit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBreaker_MaxReadLimit_Call) RunAndReturn(run func() int64) *MockBreaker_MaxReadLimit_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: conn
func (_m *MockBreaker) Register(conn *gorillawebsocket.Conn) (*websocket.Client, error) {
	ret := _m.Called(conn)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *websocket.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorillawebsocket.Conn) (*websocket.Client, error)); ok {
		return rf(conn)
	}
	if rf, ok := ret.Get(0).(func(*gorillawebsocket.Conn) *websocket.Client); ok {
		r0 = rf(conn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*websocket.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorillawebsocket.Conn) error); ok {
		r1 = rf(conn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBreaker_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockBreaker_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - conn *gorillawebsocket.Conn
func (_e *MockBreaker_Expecter) Register(conn interface{}) *MockBreaker_Register_Call {
	return &MockBreaker_Register_Call{Call: _e.mock.On("Register", conn)}
}

func (_c *MockBreaker_Register_Call) Run(run func(conn *gorillawebsocket.Conn)) *MockBreaker_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorillawebsocket.Conn))
	})
	return _c
}

func (_c *MockBreaker_Register_Call) Return(_a0 *websocket.Client, _a1 error) *MockBreaker_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBreaker_Register_Call) RunAndReturn(run func(*gorillawebsocket.Conn) (*websocket.Client, error)) *MockBreaker_Register_Call {
	_c.Call.Return(run)
	return _c
}

// UnRegister provides a mock function with given fields: client
func (_m *MockBreaker) UnRegister(client *websocket.Client) error {
	ret := _m.Called(client)

	if len(ret) == 0 {
		panic("no return value specified for UnRegister")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*websocket.Client) error); ok {
		r0 = rf(client)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBreaker_UnRegister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnRegister'
type MockBreaker_UnRegister_Call struct {
	*mock.Call
}

// UnRegister is a helper method to define mock.On call
//   - client *websocket.Client
func (_e *MockBreaker_Expecter) UnRegister(client interface{}) *MockBreaker_UnRegister_Call {
	return &MockBreaker_UnRegister_Call{Call: _e.mock.On("UnRegister", client)}
}

func (_c *MockBreaker_UnRegister_Call) Run(run func(client *websocket.Client)) *MockBreaker_UnRegister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*websocket.Client))
	})
	return _c
}

func (_c *MockBreaker_UnRegister_Call) Return(_a0 error) *MockBreaker_UnRegister_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBreaker_UnRegister_Call) RunAndReturn(run func(*websocket.Client) error) *MockBreaker_UnRegister_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBreaker creates a new instance of MockBreaker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBreaker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBreaker {
	mock := &MockBreaker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
